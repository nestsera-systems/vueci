name: Remote Dispatch Action Responder
 
on: [repository_dispatch]
 
jobs:
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.github_repository }}
          ref: ${{ github.event.client_payload.github_ref }}
          token: ${{ secrets[github.event.client_payload.ping_pat] }}

      - name: Caching Dependencies
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ github.event.client_payload.github_repository }}-${{ github.event.client_payload.github_ref }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ github.event.client_payload.github_repository }}-${{ github.event.client_payload.github_ref }}-
            ${{ runner.os }}-${{ github.event.client_payload.github_repository }}-
            ${{ runner.os }}-

      - name: Install your dependencies
        run: yarn install

      - name: Run ESLint
        run: yarn lint
  build:
    name: Build image
    needs: lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.github_repository }}
          ref: ${{ github.event.client_payload.github_ref }}
          token: ${{ secrets[github.event.client_payload.ping_pat] }}
      -
        name: Prepare
        id: prepare
        run: |
          GHCR_IMAGE=ghcr.io/${GITHUB_REPOSITORY}
          VERSION=${GITHUB_RUN_ID}
          TAGS=${GHCR_IMAGE}:${VERSION}
          echo ::set-output name=tags::${TAGS}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.prepare.outputs.tags }}
          build-args: |
            API_URL=${{ github.event.client_payload.api_url }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
