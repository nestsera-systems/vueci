name: Remote Dispatch Action Responder
 
on: [repository_dispatch]

# env:
#   GHCR_IMAGE: ghcr.io/${{ github.repository }}:${{ github.run_id }}
 
jobs:
  # lint:
  #   name: Run ESLint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ${{ github.event.client_payload.github_repository }}
  #         ref: ${{ github.event.client_payload.github_ref }}
  #         token: ${{ secrets[github.event.client_payload.ping_pat] }}

  #     - name: Caching Dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-modules-${{ github.event.client_payload.github_repository }}-${{ github.event.client_payload.github_ref }}-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-modules-${{ github.event.client_payload.github_repository }}-${{ github.event.client_payload.github_ref }}-
  #           ${{ runner.os }}-modules-${{ github.event.client_payload.github_repository }}-
  #           ${{ runner.os }}-modules-
  #           ${{ runner.os }}-

  #     - name: Install your dependencies
  #       run: yarn install

  #     - name: Run ESLint
  #       run: yarn lint
  build:
    name: Build Docker Image
    # needs: lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.github_repository }}
          ref: ${{ github.event.client_payload.github_ref }}
          token: ${{ secrets[github.event.client_payload.ping_pat] }}
      # -
      #   name: Prepare
      #   id: prepare
      #   run: |
      #     echo ${{ github }}
      #     echo "$GHCR_IMAGE"
      #     echo ::set-output name=tags::$GHCR_IMAGE
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.event.client_payload.github_repository }}-${{ github.event.client_payload.github_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.event.client_payload.github_repository }}-${{ github.event.client_payload.github_ref }}-
            ${{ runner.os }}-buildx-${{ github.event.client_payload.github_repository }}-
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.run_id }}
          build-args: |
            API_URL=${{ github.event.client_payload.api_url }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  # deploy:
  #   name: Deploy Docker Image
  #   runs-on: ubuntu-latest
  #   needs: build
  #   env:
  #     SSH_PRIVATE_KEY: ${{ github.event.client_payload.ssh_private_key }}
  #     SERVER_IP: ${{ github.event.client_payload.server_ip }}
  #     SERVER_USER: ${{ github.event.client_payload.server_user }}
  #     DOCKER_CONTAINER_NAME: ${{ github.event.client_payload.docker_container_name }}
  #   steps:
  #     -
  #       name: Setup SSH keys
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo $SSH_PRIVATE_KEY | tr -d '\r' > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         eval "$(ssh-agent -s)"
  #         ssh-add ~/.ssh/id_rsa
  #         ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
  #     -
  #       name: Deployed on the server
  #       run: |
  #         ssh $SERVER_USER@$SERVER_IP "docker stop $DOCKER_CONTAINER_NAME;
  #         docker rm $DOCKER_CONTAINER_NAME;
  #         docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
  #         docker pull $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA;
  #         docker run -d -tip $SERVER_PORT:80 --restart=always --name $DOCKER_CONTAINER_NAME $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA;
  #         docker system prune -af;
  #         docker logout $CI_REGISTRY;"